{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/robbi/OneDrive/Documents/GitHub/book-search-engine/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/robbi/OneDrive/Documents/GitHub/book-search-engine/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/robbi/OneDrive/Documents/GitHub/book-search-engine/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{Jumbotron,Container,CardColumns,Card,Button}from'react-bootstrap';import Auth from'../utils/auth';import{removeBookId}from'../utils/localStorage';import{useMutation,useQuery}from'@apollo/react-hooks';import{REMOVE_BOOK}from'../utils/mutations';import{GET_ME}from'../utils/queries';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var SavedBooks=function SavedBooks(){var _useQuery=useQuery(GET_ME),data=_useQuery.data;var _useMutation=useMutation(REMOVE_BOOK),_useMutation2=_slicedToArray(_useMutation,1),removeBook=_useMutation2[0];// create function that accepts the book's mongo _id value as param and deletes the book from the database\nvar handleDeleteBook=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(bookId){var token;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:token=Auth.loggedIn()?Auth.getToken():null;if(token){_context.next=3;break;}return _context.abrupt(\"return\",false);case 3:_context.prev=3;_context.next=6;return removeBook({variables:{bookId:bookId}});case 6:// upon success, remove book's id from localStorage\nremoveBookId(bookId);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](3);console.error(_context.t0);case 12:case\"end\":return _context.stop();}}},_callee,null,[[3,9]]);}));return function handleDeleteBook(_x){return _ref.apply(this,arguments);};}();if(!data){return/*#__PURE__*/_jsx(\"h2\",{children:\"LOADING...\"});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Jumbotron,{fluid:true,className:\"text-light bg-dark\",children:/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Viewing saved books!\"})})}),/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(\"h2\",{children:data.savedBooks.length?\"Viewing \".concat(data.savedBooks.length,\" saved \").concat(data.savedBooks.length===1?'book':'books',\":\"):'You have no saved books!'}),/*#__PURE__*/_jsx(CardColumns,{children:data.savedBooks.map(function(book){return/*#__PURE__*/_jsxs(Card,{border:\"dark\",children:[book.image?/*#__PURE__*/_jsx(Card.Img,{src:book.image,alt:\"The cover for \".concat(book.title),variant:\"top\"}):null,/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{children:book.title}),/*#__PURE__*/_jsxs(\"p\",{className:\"small\",children:[\"Authors: \",book.authors]}),/*#__PURE__*/_jsx(Card.Text,{children:book.description}),/*#__PURE__*/_jsx(Button,{className:\"btn-block btn-danger\",onClick:function onClick(){return handleDeleteBook(book.bookId);},children:\"Delete this Book!\"})]})]},book.bookId);})})]})]});};export default SavedBooks;","map":{"version":3,"sources":["C:/Users/robbi/OneDrive/Documents/GitHub/book-search-engine/client/src/pages/SavedBooks.js"],"names":["React","Jumbotron","Container","CardColumns","Card","Button","Auth","removeBookId","useMutation","useQuery","REMOVE_BOOK","GET_ME","SavedBooks","data","removeBook","handleDeleteBook","bookId","token","loggedIn","getToken","variables","console","error","savedBooks","length","map","book","image","title","authors","description"],"mappings":"4bAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,CAAoBC,SAApB,CAA+BC,WAA/B,CAA4CC,IAA5C,CAAkDC,MAAlD,KAAgE,iBAAhE,CAGA,MAAOC,CAAAA,IAAP,KAAiB,eAAjB,CACA,OAASC,YAAT,KAA6B,uBAA7B,CACA,OAAQC,WAAR,CAAqBC,QAArB,KAAoC,qBAApC,CACA,OAAQC,WAAR,KAA0B,oBAA1B,CACA,OAAQC,MAAR,KAAqB,kBAArB,C,6IAGA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,cAAeH,QAAQ,CAACE,MAAD,CAAvB,CAAOE,IAAP,WAAOA,IAAP,CACA,iBAAqBL,WAAW,CAACE,WAAD,CAAhC,8CAAOI,UAAP,kBAKA;AACA,GAAMC,CAAAA,gBAAgB,0FAAG,iBAAOC,MAAP,4HACjBC,KADiB,CACTX,IAAI,CAACY,QAAL,GAAkBZ,IAAI,CAACa,QAAL,EAAlB,CAAoC,IAD3B,IAGlBF,KAHkB,yDAId,KAJc,+CAQdH,CAAAA,UAAU,CAAC,CACjBM,SAAS,CAAE,CAACJ,MAAM,CAANA,MAAD,CADM,CAAD,CARI,QAYrB;AAEET,YAAY,CAACS,MAAD,CAAZ,CAdmB,+EAgBrBK,OAAO,CAACC,KAAR,cAhBqB,oEAAH,kBAAhBP,CAAAA,gBAAgB,4CAAtB,CAoBA,GAAI,CAACF,IAAL,CAAW,CACT,mBAAO,kCAAP,CACD,CAGD,mBACE,wCACE,KAAC,SAAD,EAAW,KAAK,KAAhB,CAAiB,SAAS,CAAC,oBAA3B,uBACE,KAAC,SAAD,wBACE,4CADF,EADF,EADF,cAME,MAAC,SAAD,yBACE,oBACGA,IAAI,CAACU,UAAL,CAAgBC,MAAhB,mBACcX,IAAI,CAACU,UAAL,CAAgBC,MAD9B,mBAC8CX,IAAI,CAACU,UAAL,CAAgBC,MAAhB,GAA2B,CAA3B,CAA+B,MAA/B,CAAwC,OADtF,MAEG,0BAHN,EADF,cAME,KAAC,WAAD,WACGX,IAAI,CAACU,UAAL,CAAgBE,GAAhB,CAAoB,SAACC,IAAD,CAAU,CAC7B,mBACE,MAAC,IAAD,EAAwB,MAAM,CAAC,MAA/B,WACGA,IAAI,CAACC,KAAL,cAAa,KAAC,IAAD,CAAM,GAAN,EAAU,GAAG,CAAED,IAAI,CAACC,KAApB,CAA2B,GAAG,yBAAmBD,IAAI,CAACE,KAAxB,CAA9B,CAA+D,OAAO,CAAC,KAAvE,EAAb,CAA+F,IADlG,cAEE,MAAC,IAAD,CAAM,IAAN,yBACE,KAAC,IAAD,CAAM,KAAN,WAAaF,IAAI,CAACE,KAAlB,EADF,cAEE,WAAG,SAAS,CAAC,OAAb,uBAA+BF,IAAI,CAACG,OAApC,GAFF,cAGE,KAAC,IAAD,CAAM,IAAN,WAAYH,IAAI,CAACI,WAAjB,EAHF,cAIE,KAAC,MAAD,EAAQ,SAAS,CAAC,sBAAlB,CAAyC,OAAO,CAAE,yBAAMf,CAAAA,gBAAgB,CAACW,IAAI,CAACV,MAAN,CAAtB,EAAlD,+BAJF,GAFF,GAAWU,IAAI,CAACV,MAAhB,CADF,CAaD,CAdA,CADH,EANF,GANF,GADF,CAiCD,CAlED,CAoEA,cAAeJ,CAAAA,UAAf","sourcesContent":["import React from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\n\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\nimport {useMutation, useQuery} from '@apollo/react-hooks';\r\nimport {REMOVE_BOOK} from '../utils/mutations';\r\nimport {GET_ME} from '../utils/queries';\r\n\r\n\r\nconst SavedBooks = () => {\r\n  const {data} = useQuery(GET_ME);\r\n  const [removeBook] = useMutation(REMOVE_BOOK);\r\n\r\n\r\n \r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n       await removeBook({\r\n       variables: {bookId}\r\n        });\r\n\r\n      // upon success, remove book's id from localStorage\r\n     \r\n        removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  if (!data) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n \r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {data.savedBooks.length\r\n            ? `Viewing ${data.savedBooks.length} saved ${data.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {data.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n"]},"metadata":{},"sourceType":"module"}