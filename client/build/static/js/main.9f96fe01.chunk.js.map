{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","data","useQuery","removeBook","handleDeleteBook","variables","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","user","log","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f96fe01.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import { gql } from '@apollo/client';\r\n// like writing routes\r\nexport const LOGIN_USER = gql`\r\n  mutation loginUser($name: String!, $email: String!, $password: String!) {\r\n    loginUser(email: $email, password: $password) {\r\n      token\r\n      username{_id,name}\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($name: String!, $email: String!, $password: String!) {\r\n    addUser(name: $name, email: $email, password: $password) {\r\n      token\r\n      username{_id,name}\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($bookData: BookInput!) {\r\n    saveBook(bookData: $bookData) {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        title\r\n        description\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook( $bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      name\r\n      email\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        description\r\n        title\r\n        link\r\n      }\r\n     \r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport {searchGoogleBooks } from '../utils/API';\r\nimport {saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {SAVE_BOOK} from '../utils/mutations'\r\n\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  const [saveBook] = useMutation(SAVE_BOOK);\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await saveBook(bookToSave, token);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch('/api/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch('/api/users/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch('/api/users', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\n\r\n// put in username, email, saved books (bookId, authors, image, link, description, title), \r\nexport const GET_ME = gql`\r\n  query UserBooks {\r\n    profiles {\r\n      bookId,\r\n      authors,\r\n      image,\r\n      link,\r\n      description,\r\n      title\r\n    }\r\n  }\r\n`;","import React from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\n\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\nimport {useMutation, useQuery} from '@apollo/react-hooks';\r\nimport {REMOVE_BOOK} from '../utils/mutations';\r\nimport {GET_ME} from '../utils/queries';\r\n\r\n\r\nconst SavedBooks = () => {\r\n  const {data} = useQuery(GET_ME);\r\n  const [removeBook] = useMutation(REMOVE_BOOK);\r\n\r\n\r\n \r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n       await removeBook({\r\n       variables: {bookId}\r\n        });\r\n\r\n      // upon success, remove book's id from localStorage\r\n     \r\n        removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  if (!data) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n \r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {data.savedBooks.length\r\n            ? `Viewing ${data.savedBooks.length} saved ${data.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {data.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport {useMutation} from '@apollo/react-hooks'\r\nimport {  ADD_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [addUser] = useMutation(ADD_USER)\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const response = await addUser(userFormData);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { token, user } = await response.json();\r\n      console.log(user);\r\n      Auth.login(token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport {useMutation} from '@apollo/react-hooks'\r\nimport { LOGIN_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [loginUser] = useMutation(LOGIN_USER)\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const response = await loginUser(userFormData);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { token, user } = await response.json();\r\n      console.log(user);\r\n      Auth.login(token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport {ApolloClient, ApolloProvider , InMemoryCache} from '@apollo/client'\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst client = new ApolloClient({\r\n  uri: '/graphql',\r\n  cache: new InMemoryCache(),\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <ApolloProvider client={client}>\r\n\r\n    <Router>\r\n      <>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path='/' component={SearchBooks} />\r\n          <Route exact path='/saved' component={SavedBooks} />\r\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}